import * as React from 'react';
import { RegisterFieldInitData } from './types';
export declare const useFieldEngine: <E>(path: string) => {
    registerField: (path: string, init: RegisterFieldInitData<E>) => void;
    unregisterField: (path: string) => void;
    formId: string;
    formState: import("./types").FormState<E>;
    formData: Partial<any>;
    formError?: E;
    payload: {};
    connectedData: {};
    setValue: (path: string | number | symbol, value: any) => void;
    setConstraints: (path: string, constraints: import("./types").Constraints) => void;
    setError: (path: string, error: E) => void;
    setFormError?: React.Dispatch<React.SetStateAction<E>>;
    setPayload: (payload: Partial<{}>) => void;
    setMountedFields: React.Dispatch<React.SetStateAction<number>>;
    updateField: (path: string, config: Pick<RegisterFieldInitData<E>, "constraints">) => void;
    registerArrayField: (path: string) => void;
    removeArrayItem: (path: string, index: number) => void;
    handleSubmit: import("./types").HandleSubmitFn;
    submitHandler: import("./types").SubmitHandlerFn;
    validateField: (path: string, value?: any) => E;
    reinit: () => void;
    clear: () => void;
    disabled?: boolean;
    progress?: boolean;
    initializing?: boolean;
    isRequiredFieldEmpty?: boolean;
    ready: boolean;
    absolutePath: string;
    value: any;
};
